---
author: [Keven Duverglas, Haylee Pierce, Will Wolf]
title: Tracing Executions
date: '2023-11-'
date-format: long
categories: [post, software engineering, debugging book]
description: <em>How can tracing be used to debug code?</em>
toc: true
page-layout: full
---

## Overview

This article covers the ["Tracing Executions"]
(https://www.debuggingbook.org/html/Tracer.html) chapter from [The Debugging
Book](https://www.debuggingbook.org/html/Intro_Debugging.html). In this article
we will summarize the chapter and discuss how its content could be utilized
within the context of our [Chasten](https://github.com/AstuteSource/chasten)
and [Cellveyor](https://github.com/GatorEducator/cellveyor) tools.

## Summary

This chapter in The Debugging Book talked about `Tracer` and it's capabilities to 
monitor and show how a function is acting and producing. Tracer allows you to observe 
many features of a program as it runs such as gives you access to see the current line 
number, variables, and more without having to write out numerous print statements using 
the command `sys.settrace`. This command gives us the ability to trace everything and 
makes it very simple to the user.

The `frame` argument holds the function, and its local variables:

frame.f_lineno - the current line
frame.f_locals - the current variables (as a Python dictionary)
frame.f_code - the current code (as a Code object), with attributes such as
    frame.f_code.co_name - the name of the current function

```python
def traceit(frame: FrameType, event: str, arg: Any) -> Optional[Callable]:
    print(event, frame.f_lineno, frame.f_code.co_name, frame.f_locals)
    return traceit
```

The function above traces the program relevant and prints out the event, which tells
us what happens in the program line by line. The trace function returns the most 
important values of the function.

```python
import sys

def remove_html_markup_traced(s):
    sys.settrace(traceit)
    ret = remove_html_markup(s)
    sys.settrace(None)
    return ret
```

The tracing function as well can be applied in a class and can work the same as before
but on a much bigger scale and can improve the efficency of a code and can easily work
and perform the trace function. The typical usage of Tracer though in a class is done 
using the `with` command. Wich traces everything indented within the with and everything 
that is not indented inside of the with is not read.

Tracing can also log while making sure the specific conditional expression does not get
changed. The conditional tracer gets a conditional expression to be checked during executions. 
But only if this condition holds will it list the current status. you can use this for
many different expressions and will only get the lines executed that are true to a statement.

```python
with ConditionalTracer(condition='quote'):
    remove_html_markup(...)
```

## Reflection

After reading this chapter, we have a better understanding of what tracing
entails. We have learned that there are several different ways to trace, from
simply using the `settrace()` function to writing a complex `Tracer` class with
conditional logic. We learned about frames and all the different variables
within them. We learned how tracing can help improve the efficency of the
debugging process. With this knowledge, we can better understand the process of
tracing and be able to implement tracing into our own programs.


## Action Items

After reading the article, our focus is on refining debugging by emphasizing the 
cause-and-effect chain, enhancing test case development, and integrating the 
scientific method. This approach proves beneficial in diagnosing and resolving
bugs, fostering a methodical and systematic debugging process. Documentation 
practices will be updated, and a commitment to continuous learning will be 
realized through training programs. These actions aim to empower our team with
a robust methodology, drawn from the insights of this chapter, enhancing our 
ability to debug code effectively. And help us to foster new ideas for ways to 
improve Chasten and Cellveyor.


<!-- Include the license statement for the online book -->
{{< include /_debuggingbook-reference.qmd >}}

<!-- Include reference back to the listing of blog posts -->
{{< include /_back-blog.qmd >}}
