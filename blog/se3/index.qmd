---
author: [Jaclyn Pham, Keven Michel Duverglas, Alish Chhetri, Gregory M. Kapfhammer]
title: Best Practices for Team-Based Software Engineering
date: '2023-9-25'
date-format: long
categories: [post, professional development, software engineering]
description: <em>How can we improve our teamwork?</em>
toc: true
page-layout: full
---

## Summary

This article is about the ["How to Work Well on
Teams"](https://abseil.io/resources/swe-book/html/ch02.html) chapter in the
[Software Engineering at Google book](https://abseil.io/resources/swe-book).
The chapter delves into the significance of collaboration and effective
communication for software engineers and their teams. The chapter debunks the
idea of the "lone genius" programmer working in isolation to create perfect
software, emphasizing that cooperative efforts often yield superior results due
to the complexity of software projects.

The concept of the **bus factor** is defined as "the number of people that need
to get hit by a bus before your project is completely doomed." (Credit:
[https://en.wikipedia.org/wiki/Bus_factor](https://en.wikipedia.org/wiki/Bus_factor))
emphasizes the importance of shared knowledge and documentation within a team.
Keeping a project's code private can lead to a lack of knowledge if a team
member leaves unexpectedly, while teamwork ensures that multiple team members
can pick up where others left off.

The chapter also encourages three key values that help create a
positive team environment:

- **Humility**: Readily accepting feedback and criticism from team members,
understanding that it contributes to personal and collective progress.

- **Respect**: Valuing the unique contributions of every team member.

- **Trust**: Fostering an environment in which the members of a software
engineering have confidence in each other's abilities and judgment.

In summation, the chapter underscores that successful software engineering
hinges on teamwork, effective communication, and knowledge sharing. It dispels
the myth of the solitary coding genius. The chapter also heralds a of embracing
change, learning from errors, and harnessing the diverse perspectives of team
members.

## Reflection

In reflecting upon the key points presented in the chapter [How to Work Well on
Teams](https://abseil.io/resources/swe-book/html/ch02.html) from the Software
Engineering at Google book, it becomes evident that successful software
engineering is fundamentally a team effort. The chapter effectively dispels and
highlights the importance of collaboration, communication, and knowledge sharing
within a team.

One of the most striking takeaways is the concept of the bus factor. This
concept serves as a stark reminder of the risks associated with keeping
knowledge and code isolated within individuals. It emphasizes the critical need
for shared knowledge and documentation to ensure the resilience of a project in
the face of unexpected departures or disruptions.

The chapter's emphasis on values such as humility, respect, and trust
underscores the importance of fostering a positive team environment. Humility
encourages a culture of continuous improvement, while respect acknowledges the
unique contributions of each team member. Trust is the foundation upon which
effective collaboration is built, as it enables team members to rely on one
another's skills and judgment.

Ultimately, the chapter shows that software engineering is a dynamic field that
thrives on collective efforts, diverse perspectives, and a willingness to learn
and adapt. It also encourages the practice of seeking feedback, as it is a
valuable tool for individual and team growth.

## Next Steps

This chapter has provided invaluable insights into optimizing teamwork and
enhancing collaboration within the context of software engineering. One team
member, Mordred, made a great point about "the desire to hide and create alone
until your project is perfect in order to minimize &mdash; or perhaps avoid
entirely &mdash; the judgment of others." However, the chapter emphasizes that
this approach often hinders progress and innovation in software engineering.

In light of these insights, another team member, named Simon, suggested these
actions:

- **Start doing**: Paying closer attention to my interactions with team members
and actively noting the various personality types present in the room during
collaborative efforts. This heightened awareness can lead to more effective
communication and collaboration.

- **Stop doing**: Continuing to work on feature branches strictly alone, or at
the very least, refraining from writing entirely isolated test cases that only
describe the intended functionality of my code. Encouraging more collaborative
and comprehensive testing practices can lead to improved code quality and
teamwork.

Once we implement these best practices, the development of
[Chasten](https://github.com/AstuteSource/chasten) will take a significant step
closer to achieving its goals and objectives. How else can we improve our
teamwork?

{{< include /_back-blog.qmd >}}
