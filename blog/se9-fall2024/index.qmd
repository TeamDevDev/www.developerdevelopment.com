---
author: [Hannah Brown, Philip Olwoc, Rebekah Rudd]
title: Code Review
date: '2024-12-02'
date-format: long
categories: [post, professional development, software engineering]
description: <em></em>
toc: true
page-layout: full
---

## Overview & Summary
This blog post discusses the [Code
Review](https://abseil.io/resources/swe-book/html/ch09.html) chapter in the
[Software Engineering at Google book](https://abseil.io/resources/swe-book). This chapter discusses having someone besides the author of the code review the code before it is added to a code base. This chapter goes through Google's process and required elements before any change to the code base was added. 

# Introduction

There are many different strategies that different companies have employed when it comes to code review from "gatekeeping" to having certain teams responsible for different aspects of the process. This chapter also discusses many benefits of code review from debugging to knowledge sharing and many other benefits. There are even some psychological benefits. 

## Code Review Flow
When a code reviews take place they can happen at many different stages of development. When a change is looked over before added to a code base that is called a "precommit review". 
What does LGTM mean and how is it used at Google? 
How do these steps of the typical code review process of Google work in our classroom?
1. A user makes changes to the code base.
2. Once the creator is done with the change they will send it or share it with a colleague.
3. Reviewers of the code make comments and change requests to the code.
4. The change maker will make any required changes.
5. The reviewers give a LGTM.
6. After the change is approved the changes are made to the code base.

## Code is a Liability
An important takeaway from this section is that code is always a liability. ALWAYS. This chapter compares the important of code to fuel in an airplane. Just like an airplane needs fuel to fly and the fuel must be bought and has weight and other inconveniences is it necessary for the airplane to fly. Our programs would not work without code and so though it is a liability it is necessary.

What are some reasons that code is considered a liability?
- it can add bugs to the programs
- any code added must be maintained

# How code review works at Google (PHILIP)

# Code Review Best Practices

Reviewing code can causes many problems. It can cause friction and be a time delay.
There are many practices that need to be set in place so code review can run smoothly and
be worth it. 

**Discution Question: Are there are an problems that we have run into as a group with code review??

## Be Polite and Professional

Google has an environment of trust and respect. At Google they need a LGTM for one software engineer
to show code comprehension. Code review can cause anxiety and stress to all different level of skilled
people. Which is why all feedback and critisim need to be professional.

If the writer of the code method is deficient the rewiever should point out different approaches but if the writer
can prove that approach is a valid way the reviewer should respect the choice. When a code reviewer finds defects it should
be taken as an opportunity to learn. Reviewers should ask question and see why code was written a certain way to understand
before jumping to an conclusions. Also, is important to see each comment as a TODO item. Each comment should at least be
addressed. Instead of marking the comment resolved if you disagree, try to resolve it by both stating their side. A common
way to keep coversations civil if the writer disagrees is to ask the reviewer to please take another look (PTAL). 

It is important to remember that as a writer of the code about profesionalism. Once you submit your work to the codebase it is not
yours anymore it becomes the team's. Be open to question and be able to share why wrote your code in the way you did. Writers of code
have a responsibilty to make the code cna last in the future while being understood.

## Write Small Changes

A way to keep the proccess quick is to make changes small. It should be easy to look at the review and tackle the issue from both sides.
It also helps cut down the time it takes. Having smaller changes makes it easier further down to know where a bug is if one arises. However,
small changes can be hard to do with new features. It helps if the code can be broken up into smaller sections. The push for small changes
helps the process of large changes to be accommodate.

"Small" changes are usually 200 lines or less of code. The changes should be small enough that it is easy on the reviwer and it does not
cause a delay with the review. It is better for a writer if the review is quicker. This helps so the flow does not change. If the works takes
a while to reviewed it can disrupt the flow. Additionally this can impact future code and cause time to be wasted if the review is not quick.

## Write Good Change Descriptions

On the first line should be the type of change for a change description. The first line is just like a subject line in an email. It is
a summary of the code which is important.

Even though the change is being summaries in the first line, you should still explain what was changed and why. A good way to share if many
modifications were made is with a list. Finding the original change helps when fixing a bug. 

There are other times when you can add documentations to change. When a reviwer looks at the writer's code is confuses it is a good sign that
the code needs better structure or comments. Always update the change description or or add comments to the implementation if a new decision reached.
Code review is not just done in the moment. It is done over times for what was did. 

## Keep Reviewers to a Minimum

Most the time people in the industry want to get many inputs on their code because each person can add their own insight.
However, having to many reviewers can lead to the feedback being less valued. If we trust the people reviewing then it helps
the proccess have less people. If your code review calls for many people then it is important for each person to write on a different
part of the change so they are not the same.

## Automate Where Possible

Code review is a process done by humans. If parts of the process can be stream lined do it. An example
of a stream line is presubmits. Presubmits save people time since it checks what is being sent to be reviewed.
This stop people from having to run tests, linters, or formatters is can be done for them. Which makes it easier to change
and catch certain errors before being reviewed. It helps people so they can spend other time on bigger issues with the code. 

# Different Types of Code Reviews

As we talk about this section one aspect I want you all to consider is: how much of our code have fallen into each of these respective categories? What are the buckets/categories that our code review generally falls into?

## Greenfield reviews and new code

Greenfield review has to do with writing new code. The chapter opened this section by saying that Greenfield code reviews are "the least common type of code review." Though this is not the case for our class. Why might this be? (the size of our code base and the newness of it) This section also considers the difference between design review and code review. Design review considers the design of the tool or how code is implemented, while code review has to do more with the usability of it. This is also an important time to consider longevity of the code that has been written especially because it is new to the code base. What do you think it is called Greenfield?

## Behavioral changes, improvement, and optimizations

These types of changes are most common at Google and they have to do with changes to existing code. This section gave the important reminder that some of the best changes to a code base can be deletions. Which we has seen in class with the PR that is deleting the `coverage.json` file in `execexam`. The sames steps that apply in the Greenfield review also apply here. Both these changes must be made in a Continuos Integration System. 

## Bug fixes and rollbacks

Code changes that have to do with bug fixes is should only correct that bug. It is easy to want to changes multiple issues with one change to the code, but this is not good practice when making changes to the code base. Rollbacks is something that was also addressed in this section. Rollbacks is when a change is made in the code base that doesn't work and there is a decision made that is reverted to a previous state of the code before the change. Though the code doesn't actually go back it is going forward but the code is the same before the not working change was implemented. It is important to note that there is always a possibility of having to do a rollback, so this should be considered whenever making changes to the code base.

## Refactorings and large-scale changes

Some changes to the code base are automated. While these changes are written by a machine and not a human they still must be reviewed in the same manner. Though with LSC no one person can veto a change, otherwise they would take too long to implement.

# Moving Forward

We have implemented many of these code review practices in class, from knowledge sharing through code reviews to writing and creating PRs. What are aspects of this process that we implement differently from Google? Are there some practices that we should start moving forward?