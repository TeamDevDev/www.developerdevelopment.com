---
author: [Hannah Brown, Philip Olwoc, Rebekah Rudd]
title: Code Review
date: '2024-12-02'
date-format: long
categories: [post, professional development, software engineering]
description: <em></em>
toc: true
page-layout: full
---

## Overview & Summary
This blog post discusses the [Code
Review](https://abseil.io/resources/swe-book/html/ch09.html) chapter in the
[Software Engineering at Google book](https://abseil.io/resources/swe-book). This chapter discusses having someone besides the author of the code review the code before it is added to a code base. This chapter goes through Google's process and required elements before any change to the code base was added. 

# Introduction

There are many different strategies that different companies have employed when it comes to code review from "gatekeeping" to having certain teams responsible for different aspects of the process. This chapter also discusses many benefits of code review from debugging to knowledge sharing and many other benefits. There are even some psychological benefits. 

## Code Review Flow
When a code reviews take place they can happen at many different stages of development. When a change is looked over before added to a code base that is called a "precommit review". 
What does LGTM mean and how is it used at Google? 
How do these steps of the typical code review process of Google work in our classroom?
1. A user makes changes to the code base.
2. Once the creator is done with the change they will send it or share it with a colleague.
3. Reviewers of the code make comments and change requests to the code.
4. The change maker will make any required changes.
5. The reviewers give a LGTM.
6. After the change is approved the changes are made to the code base.

## Code is a Liability
An important takeaway from this section is that code is always a liability. ALWAYS. This chapter compares the important of code to fuel in an airplane. Just like an airplane needs fuel to fly and the fuel must be bought and has weight and other inconveniences is it necessary for the airplane to fly. Our programs would not work without code and so though it is a liability it is necessary.

What are some reasons that code is considered a liability?
- it can add bugs to the programs
- any code added must be maintained

# How code review works at Google (PHILIP)

# Code Review Best Practices

Reviewing code can causes many problems. It can cause friction and be a time delay.
There are many practices that need to be set in place so code review can run smoothly and
be worth it. 

**Discution Question: Are there are an problems that we have run into as a group with code review??

## Be Polite and Professional

Google has an environment of trust and respect. At Google they need a LGTM for one software engineer
to show code comprehension. Code review can cause anxiety and stress to all different level of skilled
people. Which is why all feedback and critisim need to be professional.

If the writer of the code method is deficient the rewiever should point out different approaches but if the writer
can prove that approach is a valid way the reviwer should respect the choice. When a code reviwer finds defects it should
be taken as an opportunity to learn. Reviwers should ask question and see why code was written a certain way to understand
before jumping to an conclusions. Also, is important to see each comment as a TODO item. Each comment should at least be
addressed. Instead of marking the comment resolved if you disagree, try to resolve it by both stating their side. A common
way to keep coversations civil if the writer disagrees is to ask the reviewer to please take another look (PTAL). 

It is important to remember that as a writer of the code about profesionalism. Once you submit your work to the codebase it is not
yours anymore it becomes the team's. Be open to question and be able to share why wrote your code in the way you did. Writers of code
have a responsibilty to make the code cna last in the future while being understood.

## Write Small Changes

A way to keep the proccess quick is to make changes small. It should be easy to look at the review and tackle the issue from both sides.
It also helps cut down the time it takes. Having smaller changes makes it easier further down to know where a bug is if one arises. However,
small changes can be hard to do with new features. It helps if the code can be broken up into smaller sections. The push for small changes
helps the process of large changes to be accommodate.

"Small" changes are usually 200 lines or less of code. The changes should be small enough that it is easy on the reviwer and it does not
cause a delay with the review. It is better for a writer if the review is quicker. This helps so the flow does not change. If the works takes
a while to reviwed it can disrupt the flow. Additionally this can impact future code and cause time to be wasted if the reviw is not quick.

## Write Good Change Descriptions

On the first line should be the type of change for a change description. The first line is just like a subject line in an email. It is
a summary of the code which is important.

Even though the change is being summaries in the first line, you should still explain what was changed and why. A good way to share if many
modifications were made is with a list. Finding the orignal change helps when fixing a bug. 

There are other times when you can add documentations to change. When a reviwer looks at the writer's code is confuses it is a good sign that
the code needs better structure or comments. Always update the change description or or add comments to the implimentation if a new decision reached.
Code review is not just done in the moment. It is done over times for what was did. 

## Keep Reviewers to a Minimum

Most the time people in the industry want to get many inputs on their code because each person can add their own insight.
However, having to many reviwers can lead to the feedback being less valued. If we trust the people reviwing then it helps
the proccess have less people. If your code review calls for many people then it is important for each person to write on a differnet
part of the change so they are not the same.

## Automate Where Possible

Code review is a process done by humans. If parts of the proccess can be stream lined do it. An example
of a stream line is presubmits. Presubmits save people time since it checks what is being sent to be reviewed.
This stop people from having to run tests, linters, or formatters is can be done for them. Which makes it easier to change
and catch certain errors before being reviewed. It helps people so they can spend other time on bigger issues with the code. 

# Different Types of Code Reviews
